#!/bin/bash
# bin/deploy
#
# This script deploys the latest Docker image to ECS by:
# 1. Retrieving Terraform outputs for ECS cluster, services, and ECR info
# 2. Building and pushing Docker image if not already present in ECR
# 3. Triggering ECS service deployments and waiting for stability

set -e  # Exit immediately if any command fails

# === Variable declarations ===
AWS_REGION="us-east-1"
IMAGE_TAG="$(git rev-parse --short HEAD)-$(date +%Y%m%d%H%M%S)"
COMMIT_HASH="$(git rev-parse --short HEAD)"
ECS_CLUSTER_NAME=""
ECS_SERVICE_NAMES=()
ECR_REPOSITORY_URI=""
ECR_REGISTRY_SERVER=""
LOAD_BALANCER_URL=""

########## Step 1: Get Terraform outputs
echo "Getting Terraform outputs..."

cd config/deploy/terraform || { echo "Failed to cd into terraform directory"; exit 1; }

# Get the load balancer URL that got set during AWS provision. This is the url for accessing the app
LOAD_BALANCER_URL=$(terraform output -raw load_balancer_url)

# Get ECS cluster name from Terraform
ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)

# Get ECS service names (JSON), parse and convert to bash array
ECS_SERVICE_NAMES_JSON=$(terraform output -json ecs_service_names)

# Use jq to extract service names into a temporary file
jq -r 'to_entries[].value' <<<"$ECS_SERVICE_NAMES_JSON" > /tmp/services.txt

# Populate bash array ECS_SERVICE_NAMES from temp file
ECS_SERVICE_NAMES=()
while IFS= read -r line; do
    ECS_SERVICE_NAMES+=("$line")
done < /tmp/services.txt

# Clean up temporary file
rm -f /tmp/services.txt

# Get ECR repository URI and extract registry server (domain)
ECR_REPOSITORY_URI=$(terraform output -raw repository_uri)
ECR_REGISTRY_SERVER=$(echo "$ECR_REPOSITORY_URI" | cut -d/ -f1)

# Return to root directory
cd ../../.. || { echo "Failed to return to root directory"; exit 1; }

# Print key environment variables for debugging/logging
echo
echo "Environment variables after Terraform outputs:"
echo "ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME"
echo "ECS_SERVICE_NAMES=(${ECS_SERVICE_NAMES[*]})"
echo "ECR_REPOSITORY_URI=$ECR_REPOSITORY_URI"
echo "ECR_REGISTRY_SERVER=$ECR_REGISTRY_SERVER"
echo "IMAGE_TAG=$IMAGE_TAG"

########### Step 2: Build and push the Docker image

# Authenticate Docker to ECR public registry
echo
echo "Logging into ECR..."
aws ecr-public get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY_SERVER"

# Check if image with current commit hash already exists in ECR
EXISTING_TAGS=$(aws ecr-public describe-images \
  --repository-name "$(echo "$ECR_REPOSITORY_URI" | cut -d/ -f3)" \
  --region "$AWS_REGION" \
  --output json \
  --query "imageDetails[?imageTags!=null && contains(join(',', imageTags), '${COMMIT_HASH}-')].imageTags[]" \
  | jq -r '.[]')

if [[ -z "$EXISTING_TAGS" ]]; then
    echo
    echo "Building and pushing Docker image..."
    docker build -t "$ECR_REPOSITORY_URI:$IMAGE_TAG" .
    docker tag "$ECR_REPOSITORY_URI:$IMAGE_TAG" "$ECR_REPOSITORY_URI:latest"

    echo "Pushing images to ECR..."
    docker push "$ECR_REPOSITORY_URI:$IMAGE_TAG"
    docker push "$ECR_REPOSITORY_URI:latest"
else
    echo
    echo "Image with commit $COMMIT_HASH already exists in ECR. Skipping build and push."
    echo "Using existing image tag(s): $EXISTING_TAGS"
fi

############ Step 3: Deploy directly to ECS

for ECS_SERVICE_NAME in "${ECS_SERVICE_NAMES[@]}"; do
    echo
    echo "Updating ECS service '$ECS_SERVICE_NAME' in cluster '$ECS_CLUSTER_NAME'..."
    aws ecs update-service --cluster "$ECS_CLUSTER_NAME" --service "$ECS_SERVICE_NAME" --force-new-deployment --region "$AWS_REGION" > /dev/null

    echo "Waiting for deployment of '$ECS_SERVICE_NAME' to complete..."
    aws ecs wait services-stable --cluster "$ECS_CLUSTER_NAME" --services "$ECS_SERVICE_NAME" --region "$AWS_REGION"
done

# Final wait for all services (optional but good for certainty)
echo
echo "Waiting for deployment of all services to complete..."
aws ecs wait services-stable --cluster "$ECS_CLUSTER_NAME" --services "${ECS_SERVICE_NAMES[@]}" --region "$AWS_REGION"

echo
echo "Deployment completed successfully!"
echo "Verify it at $LOAD_BALANCER_URL"